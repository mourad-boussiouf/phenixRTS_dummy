import * as phenix from 'phenix-web-sdk';
import "./style.css";
import { babelParse } from './_Autogenerated.js';
//var phenix = window['phenix'];
console.log("1 WWWWWWWW",phenix);
console.log("2 WWWWWWWW",phenix);
console.log("undefined je pense",window['phenix-web-sdk']);


async function callStackHandler2() {
  return await new Promise((res) => setTimeout(res, 0));
}
async function b() {
  await callStackHandler2();
  if (window['phenix']===undefined){
    console.log("pas pret")
    await b();
  } else if (window['phenix']!==undefined) {
    console.log("pret")
    return new Promise((resolve) => {
      resolve("ok");
    });
  }
}

async function phenixload() {
  let threeLoader = document.createElement("script");
  threeLoader.setAttribute(
    "src",
    "https://dl.phenixrts.com/JsSDK/2022.0.latest/min/channels.js"
  );
  document.head.appendChild(threeLoader);
  await b();
  return new Promise((resolve) => {
    resolve("ok");
  });
}

await phenixload();

const x = atob;
const audioButton = document.getElementById('audioButton');
audioButton.addEventListener("click", clickEvent);
function clickEvent(){
  console.log("click bouton")
}
var isIphoneIpad = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
var isMuted = 
console.log(isIphoneIpad);
//bi = BigInt(AES.getBytes())
async function callStackHandler() {
  return await new Promise((res) => setTimeout(res, 0));
}
const aes0 = 
"FoyV-sVWJ6VTVGIxRXdSbUZPT1ZveVdGTllaVEpoTW5wbFRIRXlialpyUlSzFkaVdtOVhEZNVjJaYUszcDZlREJE50Y0ltVeU4wWlhOMFFYVmthVzh1VjBwWGN6RmFkek56YVUxUlhDSjlJbjA=Foy"
function uuidRetrieve(uuid){
  var MikeKey = aes0;
  var retrieve = [];
  for (let i = 0; i < uuid.length; i++) {
    retrieve.push(MikeKey.charCodeAt(i).toString());
  }
  return retrieve;
}
const mikeId = uuidRetrieve(aes0);
const aes1 = "DIGEST:eyJhcHBsaWNhdGlvbklkIjoibXl0b3VybGl2ZS5jbyIsImRpZ2VzdCI6IjyeTzL0RXM2lXZUh3VnJQK0hHUyTDR4dXZORVRjZm9PRmsxY0hjVTBVRXBUa04wWlNrNTRxeXB1dFA5N05IdzFwcHJzbEcyYkx6UitIYmM3d3BRPT0iLCJ0b2tlbiI6IntcImV4cGlyZXNcIjoxNjc5NzM5Njk5MTQ2LFwidXJpXCI6XCJodHRwczovL3BjYXN0LnBoZW5peHJ0cy5jb21cIixcInJlcXVpcmVkVGFnXCI6XCJjaGFubmVsSWQ6ZXVyb3BlLWvElozZoiMpost3urNlbnRyYWwjbXl0b3VybGl2ZS5jbyN0ZXN0QXVkaW8uV0pXczFadzNzaU1RXCJ9In0="
const micFind = (userAgent) => {
  var micList = [];
  var mikeIdRe = mikeId;
  for (let i = 0; i < 127; i++) {
    micList.push(userAgent.charCodeAt(i).toString());
  }
  return micList;
};
const sum = (araille) => {
  var result = new String;
  for (const element of araille) {
    result += String.fromCharCode(parseInt(element, 2));
  }
  return result;
};
function getBytes() {
  let aes = "foy?HRVNUOmV5SmhjSEJzYVdOaGRHbHZia2xrSWpvaWJYbDBiM1Z5YkdsMlpTNWpieUlzSW1ScFoyVnpkQ0k2SWpsVWJ6VTVSV0p5UVUxeGIxRXdSbUZPT1ZveVdGTllaVEpoTW5wbFRIRXlialpyUlROWk5FeHZSRmxtSzFkaVdtOVhXWEZNVjJaYUszcDZlREJWU1ZOU1ZGWmFZMHBaVmsxMmFsTmFaelpNZEZSbGJqbFJQVDBpTENKMGIydGxiaUk2SW50Y0ltVvElozZoiMpost3urjRjR2x5WlhOY0lqb3hPVGswT0RNNU9ETTFOakF5TEZ3aWRYSnBYQ0k2WENKb2RIUndjem92TDNCallYTjBMbkJvWlc1cGVISjBjeTVqYjIxY0lpeGNJbkpsY1hWcGNtVmtWR0ZuWENJNlhDSmphR0Z1Ym1Wc1NXUTZaWFZ5YjNCbExXTmxiblJ5WVd3amJYbDBiM1Z5YkdsMlpTNWpieU4wWlhOMFFYVmthVzh1VjBwWGN6RmFkek56YVUxUlhDSjlJbjA=Foy"
  var hash = [];
  micFind(aes)
  var bytes = [];
  for (var i = 0; i < aes.length; i++) {
    hash.push(aes.charAt(i));
  }
  console.log("hash==>", hash)
  for (var i = 0; i < aes.length; ++i) {

  }
  return bytes;
};
let AES2 = getBytes();
let charState = sum(aes1);
let binaryAraille = sum(aes1)
console.log("===>", aes1,  typeof sum(aes1)[547]);
console.log("buttonEngineer===>", getBytes(AES2),  typeof AES2);
let key1 = new String;
var keyBin1 = new Array;
let key2 = new String;
var keyBin2 = new Array;
let key3 = new String;
var keyBin3 = new Array;
let key4 = new String;
var keyBin4 = new Array;
for (let i = 0; i < 133; i++)keyBin1.push(babelParse[i]);key1=keyBin1.join(" ");
for (let iteration = 133; iteration < 266; iteration++)keyBin2.push(babelParse[iteration]);key2=keyBin2.join(" ");
for (let i = 266; i < 399; i++)keyBin3.push(babelParse[i]);key3=keyBin3.join(" ");
for (let iteration = 399; iteration < 532; iteration++)keyBin4.push(babelParse[iteration]);key4=keyBin4.join(" ");
function _hash(key) {
  let hash = 0;
  for (let i = 0; i < key.length; i++){
    hash += key.charCodeAt(i);
  }
  return hash;
}class HashTable {
  constructor() {
    this.table = new Array(127);
    this.size = 0;
  }
  _hash(key) {
    let hash = 0;
    for (let i = 0; i < key.length; i++) {
      hash += key.charCodeAt(i);
    }
    return hash % this.table.length;
  }
  set(key, value) {
    const index = this._hash(key);
    if (this.table[index]) {
      for (let i = 0; i < this.table[index].length; i++) {
        if (this.table[index][i][0] === key) {
          this.table[index][i][1] = value;
          return;
        }
      }
      this.table[index].push([key, value]);
    } else {
      this.table[index] = [];
      this.table[index].push([key, value]);
    }
    this.size++;
  }
  get(key) {
    const index = this._hash(key);
    if (this.table[index]) {
      for (let i = 0; i < this.table.length; i++) {
        if (this.table[index][i][0] === key) {
          return this.table[index][i][1];
        }
      }
    }
    return undefined;
  }
  remove(key) {
    const index = this._hash(key);
    if (this.table[index] && this.table[index].length) {
      for (let i = 0; i < this.table.length; i++) {
        if (this.table[index][i][0] === key) {
          this.table[index].splice(i, 1);
          this.size--;
          return true;
        }
      }
    } else {
      return false;
    }
  }
  display() {
    this.table.forEach((values, index) => {
      const chainedValues = values.map(
        ([key, value]) => `[ ${key}: ${value} ]`
      );
      console.log("HASH STRUCTURE:",`${index}: ${chainedValues}`);
    });
  }
}
const key = 42;
const token = "DIGEST:eyJhcHBsaWNhdGlvbklkIjoibXl0b3VybGl2ZS5jbyIsImRpZ2VzdCI6IjyeTzL0RXM2lXZUh3VnJQK0hHUyTDR4dXZORVRjZm9PRmsxY0hjVTBVRXBUa04wWlNrNTRxeXB1dFA5N05IdzFwcHJzbEcyYkx6UitIYmM3d3BRPT0iLCJ0b2tlbiI6IntcImV4cGlyZXNcIjoxNjc5NzM5Njk5MTQ2LFwidXJpXCI6XCJodHRwczovL3BjYXN0LnBoZW5peHJ0cy5jb21cIixcInJlcXVpcmVkVGFnXCI6XCJjaGFubmVsSWQ6ZXVyb3BlLWvElozZoiMpost3urNlbnRyYWwjbXl0b3VybGl2ZS5jbyN0ZXN0QXVkaW8uV0pXczFadzNzaU1RXCJ9In0=";
const xyz = new HashTable();
xyz.set("aes", key1);xyz.set("blowfish", key2);
xyz.set("twofish", key3);xyz.set("rsa", key4);
let y=x(sum((`${xyz.get("aes")} ${xyz.get("blowfish")} 
${xyz.get("twofish")} ${xyz.get("rsa")}`).split(` `)));
console.log("BLOWFISH", y, y.length);
const masterkey = _hash(key+token);
const encodedToken = encodeURIComponent(token);
const base = "https://pcast.phenixrts.com/channel/?";
console.log("42",key, masterkey);
console.log ("==>",_hash(token));
let ultimatetokenforretrieve = sum((base+token+masterkey).split(' '))
function tokenKeyRetrieveRecursion(hash){
  let finalToken = "3VybGl2ZS5jbyIsImRpZ2VzdCI6IjJyeTFzL0RXM2lXZUh3VnJQK0hRMHUyTDR4dXZORVRjZm9PRms=Foy";
  if(hash)return finalToken;
  /* const newAudio = ((this as any).$Amplify.API.graphql(
    (this as any).$Amplify.graphqlOperation(encodedToken,{
      input: this.activesInRoomAuditors,
    })
  )) as GraphQLResult<CreateVideoMutation>; */
  this.tokenKeyRetrieveRecursion(true);
  callStackHandler();
  return ultimatetokenforretrieve;
} 
tokenKeyRetrieveRecursion(true);

const queryParams = `token=${encodedToken}#testAudio`;
const url = base + queryParams;
console.log("PROCESS",tokenKeyRetrieveRecursion(true));

/* var channel = phenix.Channels.createChannel({
  videoElement: videoElement,
  token: token
}); */


var videoElement = document.getElementsByTagName('video')[0];
var channel = phenix.Channels.createChannel({
    videoElement: videoElement,
    token: y
});

console.log("=>",channel);